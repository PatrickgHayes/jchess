R1	 [ C ][*H*][ B ][*Q*][ K ][*B*][ H ][*C*]

R2	 [*P*][ P ][*P*][ P ][*P*][ P ][*P*][ P ]

R3	 [   ][* *][   ][* *][   ][* *][   ][* *]

R4	 [* *][   ][* *][   ][* *][   ][* *][   ]

R5	 [   ][* *][   ][* *][   ][* *][   ][* *]

R6	 [* *][   ][* *][   ][* *][   ][* *][   ]

R7	 [ p ][*p*][ p ][*p*][ p ][*p*][ p ][*p*]

R8	 [*c*][ h ][*b*][ q ][*k*][ b ][*h*][ c ]



	   1    2    3    4    5    6    7    8
	   C    C    C    C    C    C    C    C





    ------------------------
R1 | c [h] b [q] k [b] h [c]|
R2 |[p] p [p] p [p] p [p] p |
R3 |   [ ]   [ ]   [ ]   [ ]|
R4 |[ ]   [ ]   [ ]   [ ]   |
R5 |   [ ]   [ ]   [ ]   [ ]|
R6 |[ ]   [ ] P [ ]   [ ]   |
R7 | P [P] P [P]   [P] P [P]|
R8 |[C] H [B] Q [K] B [H] C |
    ------------------------
     C  C  C  C  C  C  C  C
     1  2  3  4  5  6  7  8    


Improvement steps:
* Undo function [done]
* Place function [done]
* Move zero indexing logic to the input parsing.
* Allow user input to be piece name (must make pawns etc. seperate)
   and move and direction amount
* display history
* redo
* save game board

For the future:
* Pinging an AWS server
* Communicating between two players' terminals
* Ability to play multiple games
* Better user interface (GUI)


example of commands:
* place P r1c3
* undo
* move r1c2 r3c4
* checkmate


example of undo stack:
move 2 1 3 1 _
move 4 4 4 9 'q'
place Q 5 5  _
place q 5 5 Q


04/16/20:
* Changing moving and placing to support new format in addition to old format
* Example of new format
move QC1 u3
move KN3 u1
move KB1 ul3
place p Q5

* Add Parser class, abstract command class, and concrete command classes:

Command c = Parser.parse(input.nextLine());
c.execute();

04/17/20:
* Abstract class needs to contain more common data
* Created abstract command class and concrete command classes
* Undo command will invoke UndoMove or UndoPlace commands via a history stack
* Tomorrow we will write the parser class and clean up the chess board class


04/20/20: 
        /\
 |\    /  \    /|
 | \   \  /   / |
 |  |  \  /  |  |
  \  \ \  / /  /
|\__\ \\  // /__/|
 \___--    --___/
     /_/||\_\
        ||
* Finished refactoring. Finished parser and used it in the chessboard main method.
* tested game play.
* TODO set up build tool to easy compiling and managing class files
* TODO add support for descriptive moves

04/21/20:
* TODO make undo command not turn based
* TODO player classes
* TOFO castling
* TODO pawn promotions
* Possibly add rows and column labels for descriptive moves
* Today, we finished the first half of descriptive moves by parsing descriptive notation
* TODO parse relative move locations

04/22/20:
* For relative moving, the following formats will be accepted:

single move: {u,d,l,r} [1-8]

diagonal: {u,d,l,r} {(u,d) | (l,r)} [1-8]

horse: {u,d,l,r} [1-8] {(u,d) | (l,r)} [1-8]


System.out.println("To move specify the row an column of the piece you want to move and then the row and column of the destination");
System.out.println("Example: move 7 1 8 1");

System.out.println("To move first specify th piece you want to move by you using decriptive chess notation for example the pawn in front of your queen is q2. The pawn in front of the bishop on your queens side (queens bishop 2) would be entered qb2.");
System.out.println("Then specify how squares youd like to move up of down followed by how many squares you'd like to move left and right");
System.out.println("An example command all together would  move QB1 u5r5");

* TODO change coordinate form to be r1c1 r1c2
* Today we finished descriptive moves
* TODO descriptive places

04/23/20:
* example place command: place player p qr2
* finished place
* TODO ADD UNIT TESTING !*!*!

04/24/20:
* Did first ping between a server and a client
* looked into unit tests